package production.jattbrand.notes.ui.main.fragments;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.textfield.TextInputEditText;
import com.google.firebase.storage.StorageReference;

import java.io.File;
import java.util.List;
import java.util.Objects;

import pl.aprilapps.easyphotopicker.ChooserType;
import pl.aprilapps.easyphotopicker.DefaultCallback;
import pl.aprilapps.easyphotopicker.EasyImage;
import pl.aprilapps.easyphotopicker.MediaFile;
import pl.aprilapps.easyphotopicker.MediaSource;
import production.jattbrand.notes.R;
import production.jattbrand.notes.RuntimeData;
import production.jattbrand.notes.modals.general.NotificationTopics;
import production.jattbrand.notes.ui.main.base.BaseMainFragment;
import production.jattbrand.notes.utils.helpers.NotificationTopicsHelper;
import production.jattbrand.notes.utils.helpers.PermissionsHelper;
import production.jattbrand.notes.utils.helpers.PreferenceManager;
import pub.devrel.easypermissions.EasyPermissions;

public class AddNotificationGroupFragment extends BaseMainFragment {


    private static final int RC_CAMERA_AND_STORAGE = 738;
    private static final String TAG = "AddNotifGroupFragment";
    private EasyImage easyImage;
    ImageView cover_image;
    Button button_next;
    ImageButton change_cover_imageButton;
    TextInputEditText input_title, input_description;
    String cover_url = "";
    String[] permissions = new String[]{
            Manifest.permission.CAMERA,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE
           // Manifest.permission.MANAGE_EXTERNAL_STORAGE
    };

    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState
    ) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_add_notification_group, container, false);
    }

    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        initViews(view);

        easyImage = new EasyImage.Builder(requireContext())

// Chooser only
// Will appear as a system chooser title, DEFAULT empty string
                .setChooserTitle("Pick media")
// Will tell chooser that it should show documents or gallery apps
//.setChooserType(ChooserType.CAMERA_AND_DOCUMENTS)  you can use this or the one below
                .setChooserType(ChooserType.CAMERA_AND_GALLERY)

// Setting to true will cause taken pictures to show up in the device gallery, DEFAULT false
                .setCopyImagesToPublicGalleryFolder(false)
// Sets the name for images stored if setCopyImagesToPublicGalleryFolder = true
                .setFolderName("Notes")
// Allow multiple picking
                .allowMultiple(false)
                .build();

        Glide.with(this)
                .load(new PreferenceManager(requireContext()).getGeneralData().getDefault_group_cover())
                .fitCenter()
                .circleCrop()
                .into(cover_image);

        button_next.setOnClickListener((v) -> {

            if (validated()) {
                showProgressBar();
                NotificationTopics topics =
                        new NotificationTopics(Objects.requireNonNull(input_title.getText()).toString(),
                                cover_url,
                                Objects.requireNonNull(input_description.getText()).toString());
                Task<Void> task = new NotificationTopicsHelper().addTopic(topics);

                task
                        .addOnSuccessListener(aVoid -> {
                            showSnackbar("Topic Added Success");
                        })
                        .addOnFailureListener(e -> {
                            showSnackbar("Topic Add Failed");
                        })
                        .addOnCompleteListener(task1 -> {
                            clearFlags();
                            hideProgressBar();
                        });
            }
        });

        change_cover_imageButton.setOnClickListener((v) -> {

            if (EasyPermissions.hasPerm